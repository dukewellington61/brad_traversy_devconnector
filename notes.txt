8. Route Files With Express Router
@public and private routes

#private routes
for example to add a profile you need to be authenticated
so you need to send along a token to that route (some middleware will handle this)

#public routes don't need tokens

16. Get Current User Profile

mongoose returns a promise 

when ever an API returns a promise we need async await


****web token****

if a user logs in or a user registers (new user is created) that user gets a web token
the web token is then beeing send along with every request that the user makes 
this identifies a valid user if that user accesses protected routes such as the profile routes which return the profile of that user
which profile is to be returned is determined by the user's id which is part of the web token

20. Add Profile Experience
create update existing experience route


****controll D**** selects words that are the same

28. Add & Remove Comment Routes
create like comment route
create update comment


40. Auth Reducer & Register Action client/src/reducers/auth.js

2) Hmm, there's a pretty big difference if you include or exclude that spread operator. Let's say our payload object looks like:

{
    token: "abc123xyz789"
}
If you include the spread operator, the auth state will look like:

{
    user: { ... }, // ignoring the full object here for brevity
    token: "abc123xyz789",
    isAuthenticated: true,
    loading: false
}
If you exclude the spread operator, the state will become:

{
    user: { ... }, // ignoring the full object here for brevity
    payload: {
        token: "abc123xyz789",
    },
    isAuthenticated: true,
    loading: false
}
payload is now a key, containing a nested object with our token. There's nothing inherently wrong with this, but our application certainly may get confused when trying to find the token.


41. Load User & Set Auth Token

Load User --> everytime the App.js component is loaded the web token which is stored in local storage is beeing send to the back end for validation (authentication) and the user is loaded --> the point of this is to see if we are logged in, it'll also give us the user data 


42. User Login

done except one thing: in actions/auth.js we have dispatch(loadUser()); why dispatch, why not simplay call loadUser function --> answer to that in link below
https://www.udemy.com/course/mern-stack-front-to-back/learn/lecture/14555612#questions/10123662

question asked: 

So we need to dispatch a function call (as oppose to calling that function the normal way i.e. without dispatch) whenever the function that is called is changing the state. Is this the way it works?

wait for answer


44. Protected Route For Dashboard

done


45. Profile Reducer & Get Current Profile

done


46. Starting On The Dashboard

Landing.js: 
redirect to dashboard if user is logged in 

Dashboard.js: 
loading spinner in dashboard while user profile is beeing loaded 
when user profile has been loaded some markup with hello username is rendered

Dashboard.js:  
conditional checks if user has profile --> if not renders text and button which links to register area 

profile.js: 
on logout state is set to  
token: null,
isAuthenticated: false,
loading: false,


47. CreateProfile Component

@components/profile-forms/CreateProfile.js

new component created

component has jsx for user register form

form fields connected to useState hook which holds formdata 
-> whatever is the value of the text field is beeing put in that part of the state of the form data:

const onChange = (e) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

button Add Social Networks triggers function toggleSocialInputs which hides or displays social media fields


@App.js
route to component
 <PrivateRoute exact path="/create-profile" component={CreateProfile}/>


48. Create Profile Action

@actions/profile.js

const createProfile 
-> axios post request to send form data to /api/profile - route which delivers data to database

and returns this data
-> dispatches this data to reducer with action type GET_PROFILE 

which updates profile parameter of profile state object
-> dispatches an alert

re-routes back to the dashboard using the history object which has a method called push that will redirect
us to a client side route.

status: 
typed out

re-watch stopped at 9:25

another concept to comprehend: React Router -> watch this: https://www.youtube.com/watch?v=Law7wfdg_ls
